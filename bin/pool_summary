#!/usr/bin/env ruby

$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib/")

require 'cgminer_api_client'

# reopen CgminerApiClient::MinerPool and add a summary method
module CgminerApiClient
  class MinerPool
    def print_summary
      @totals = {
        :ghs_avg    => 0,
        :ghs_5s     => 0,
        :error_rate => 0
      }

      @miners.each do |miner|
        if miner.available?
          summary = miner.summary[:summary][0]
          devices = miner.devs[:devs]

          @totals[:ghs_avg] += summary[:ghs_av]
          @totals[:ghs_5s]  += summary[:ghs_5s]

          puts "#{miner.host}:#{miner.port}"
          puts "\tGH/s(5s)\t#{summary[:ghs_5s]}"
          puts "\tGH/s(avg)\t#{summary[:ghs_av]}"
          puts "\tDevices\t#{devices.count}"

          devices.each do |device|
            puts "\t\tName\t#{device[:name]}"
            puts "\t\tStatus\t#{device[:status]}"
            puts "\t\tElapsed\t#{device[:device_elapsed] / 60} min"
            puts "\t\tTemp\t#{device[:temperature]} C"
            puts "\t\tErr\t#{device[:'device_hardware%']}%\n\n"

            @totals[:error_rate] += device[:'device_hardware%']
          end
        end
      end

      puts "============================================="
      puts "\nTotal GH/s"
      puts "\t5s\t#{@totals[:ghs_5s].round(1)} (#{(@totals[:ghs_5s] / @miners.count).round(1)} / miner)"
      puts "\tAvg\t#{@totals[:ghs_avg].round(1)} (#{(@totals[:ghs_avg] / @miners.count).round(1)} / miner)"
      puts "\nError Rate"
      puts "\tAvg\t#{(@totals[:error_rate] / @miners.count).round(4)}% / miner"
      puts "\tGH/s(5s)\t#{((@totals[:error_rate] / @miners.count) * @totals[:ghs_5s] / 100).round(2)}"
      puts "\tGH/s(avg)\t#{((@totals[:error_rate] / @miners.count) * @totals[:ghs_avg] / 100).round(2)}"
    end
  end
end

CgminerApiClient::MinerPool.new.print_summary